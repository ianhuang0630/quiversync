{
  "title": "Mar 8",
  "cells": [
    {
      "type": "text",
      "data": "<div style=\"word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; white-space: normal;\"><div>nc -l 12345</div><div><br/></div><div>nc <a href=\"http://clac.cs.columbia.edu\">clac.cs.columbia.edu</a> 12345</div><div><ul><li>client mode: you tell it where to go</li><li>Go to  clac…</li></ul></div><div><br/></div><div>1-1023</div><div><ul><li>reserved for system use</li></ul><div><br/></div></div><div><a dir=\"ltr\" href=\"tel:1024%20-%2065636\">1024 - 65636</a></div><div><ul><li>available for users to use</li></ul><div><br/></div></div><div>port numbers on clac below 10000 is not available</div><div><br/></div><div>does two things at the same time</div><div><ul><li>reads whatever you type in stdin </li><li>reads things that comes through the network and dumps it in stdout</li></ul><div><br/></div></div><div><br/></div><div><br/></div><div>a potential way for nc to work: fork with two processes - one does the reading and one does the sending</div><div>but it actually doesn’t work that way</div><div><br/></div><div><br/></div><div>both are “listening” for data</div><div>but listening usually means “listening for initial client cell”</div><div><br/></div><div><span style=\"font-weight: bold;\">you have to listen before you connect</span></div><div><span style=\"font-weight: bold;\">nc -l first </span></div><div><span style=\"font-weight: bold;\">nc clac… after</span></div><div><br/></div><div><br/></div><div><br/></div><div><hr/><div>browser: client-mode program</div></div><div><br/></div><div>domain-name server (<a dir=\"ltr\" href=\"http://www.cnn.com\">www.cnn.com</a>) —&gt;  ip address </div><div><br/></div><div><ul><li>translates <a href=\"http://www.cnn.com\">www.cnn.com</a> to ip address</li><li>port 80 is by default, by both client and server</li><ul><li>if not 80:</li><ul><li>nc <a href=\"http://www.cnn.com:123198\">www.cnn.com:123198</a></li></ul></ul><li>GET INDEX.HTML</li><li>server sends the pages</li><li>browser receives the pages and displays on the browser window</li></ul><div><br/></div><div>hypertext transport protocol : HTTP</div><div><br/></div><div>Every connection is identified using a tuple:</div><div>(server side ip address, server side port #, client side ip address, client side port #)</div></div><div><br/></div><div>once a connection is received, it’s set aside and the server continues listening</div><div><br/></div><div>email servers : 24</div><div>SSH servers uses cryptotech to encrypt the information you send</div><div><br/></div><div><br/></div><div><span style=\"font-weight: bold;\">How the internet works</span></div><div><br/></div><div><br/></div><div>L5 : Application layer: HTTP, SMTP(simple mail transport protocol), SSH(secure shell)</div><div>L4 : Transport layer : TCP, UDP, SCTP (TCP is the most common protocol)</div><div><ul><li>takes unreliable service from IP and builds a reliable stream</li><ul><li>it has to do a lot of work</li></ul><li>the receiving end tells sender that it’s received the information</li><li>the patches are numbered</li><li><br/></li></ul></div><div>L3 : Network layer: IP (Internet protocol)</div><div><ul><li>Version 4 is the old version still used today (IPv4)</li><li>new version is Version 6 (IPv6)</li><li>info on computer -&gt; “gateway” (chooses among computers connected to it for next desintation) -&gt; next gateway computer -&gt; …</li><ul><li>these computers are called routers</li></ul><li>the protocol is all about how to transport the information</li><li>information CAN get lost. No guarantee that two patches take the same route, or arrive in order. patches can get duplicated too (rebooted routers)</li><li><br/></li></ul></div><div>L2 : Link layer: Ethernet, WIFI</div><div><ul><li>Sending information through direct physical medium</li><li>1500 bytes is the max you can send through old ethernet</li></ul></div><div>L1 : Physical layer</div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div>Engineering principle of layering and pushing issues onto more complex upper layers</div><div>CS4119 - computer networks</div><div><br/></div><div><br/></div><div><span style=\"font-weight: bold;\">For lab 5:</span></div><div>nc </div><div>fork &amp; exec</div><div>mdb-lookup a network server</div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div>mkfifo mypipe</div><div><ul><li>prw-r—r—</li><ul><li>special type</li><li>“named pipe”</li></ul></ul><div><br/></div></div><div>cat mypipe | ./mdb-lookup-cs3157 | nc -l 12345 &gt; mypipe</div><div><ul><li>getting input from another machine</li></ul><div><br/></div></div><div><br/></div><div><img src='quiver-image-url/DCB9214BCC3F24A4489BFAB1B4A04FBB.jpg' width='434' title='Attachment'><br/></div><div><br/></div><div><en-<a href='quiver-file-url/'></a>></div><div><br/></div><div><br/></div><div><br/></div><div>pipe file is needed to create the loop above</div><div>THe bottom part is pretty much a server.</div><div><br/></div></div>"
    }
  ]
}