{
  "title": "Jan 23",
  "cells": [
    {
      "type": "text",
      "data": "<div style=\"word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; white-space: normal;\"><div><span style=\"font-weight: bold; font-size: 36px;\">Mechanics of Linking and Making a C file </span></div><div><br/></div><div>when you run make, </div><div> </div><div>it compares the date of the target to the nearest edited date of the .c file.</div><div><ul><li>if the date of target is before the recent change, it will recompile.</li></ul><div><br/></div></div><div><br/></div><div>Make keeps track of weither you actually need to recompile things</div><div><br/></div><div><br/></div><div><span style=\"background-color: rgb(255, 250, 165);-evernote-highlight:true;\">  5 main.o: main.c myadd.h</span></div><div><span style=\"background-color: rgb(255, 250, 165);-evernote-highlight:true;\">  6         gcc -c main.c</span></div><div>  </div><div>make myadd.o</div><div><br/></div><div><br/></div><div>  4 main: main.o myadd.o</div><div>  5     gcc myadd.o main.o -o main</div><div>  6</div><div><ul><li>finds that main.o is a target</li><ul><li>builds main.o</li></ul><li>finds that myadd.o is a target</li><ul><li>builds myadd.o</li></ul></ul><div><br/></div></div><div><span style=\"background-color: rgb(255, 250, 165);-evernote-highlight:true;\">  1 #target: prereqs</span></div><div><span style=\"background-color: rgb(255, 250, 165);-evernote-highlight:true;\">  2 #    command</span></div><div><span style=\"background-color: rgb(255, 250, 165);-evernote-highlight:true;\">  3 #    command</span></div><div><span style=\"background-color: rgb(255, 250, 165);-evernote-highlight:true;\">  4 main: main.o myadd.o</span></div><div><span style=\"background-color: rgb(255, 250, 165);-evernote-highlight:true;\">  5     gcc myadd.o main.o -o main</span></div><div><span style=\"background-color: rgb(255, 250, 165);-evernote-highlight:true;\">  6</span></div><div><span style=\"background-color: rgb(255, 250, 165);-evernote-highlight:true;\">  7 main.o: main.c myadd.h</span></div><div><span style=\"background-color: rgb(255, 250, 165);-evernote-highlight:true;\">  8     gcc -c main.c</span></div><div><span style=\"background-color: rgb(255, 250, 165);-evernote-highlight:true;\">  9</span></div><div><span style=\"background-color: rgb(255, 250, 165);-evernote-highlight:true;\"> 10 myadd.o: myadd.c myadd.h</span></div><div><span style=\"background-color: rgb(255, 250, 165);-evernote-highlight:true;\"> 11     gcc -c myadd.c</span></div><div><span style=\"background-color: rgb(255, 250, 165);-evernote-highlight:true;\">~</span></div><div><span style=\"background-color: rgb(255, 250, 165);-evernote-highlight:true;\">~</span></div><div><span style=\"background-color: rgb(255, 250, 165);-evernote-highlight:true;\">~</span></div><div><span style=\"background-color: rgb(255, 250, 165);-evernote-highlight:true;\">~</span></div><div><br/></div><div><br/></div><div>updating myadd.h means</div><div><ul><li>main.o has to be remade</li><li>myadd.o has to be remade</li><li>main has be remade</li></ul><div><br/></div></div><div>Make files commands must be separated by <span style=\"font-weight: bold;\">tabs. </span><span style=\"font-weight: bold; text-decoration: underline;\">not spaces.</span></div><div><br/></div><div><span style=\"font-style: italic;\">  4 main: main.o myadd.o</span></div><div><span style=\"font-style: italic;\">  5     gcc myadd.o main.o -o main</span></div><div><span style=\"font-style: italic;\">  6     echo &quot;All Done&quot;</span></div><div><span style=\"font-style: italic;\">  7</span></div><div><span style=\"font-style: italic;\">  8 main.o: main.c myadd.h</span></div><div><span style=\"font-style: italic;\">  9     gcc -c main.c</span></div><div><span style=\"font-style: italic;\"> 10</span></div><div><span style=\"font-style: italic;\"> 11 myadd.o: myadd.c myadd.h</span></div><div><span style=\"font-style: italic;\"> 12     gcc -c myadd.c</span></div><div><span style=\"font-style: italic;\"> 13</span></div><div><span style=\"font-style: italic;\"> 14</span></div><div><span style=\"font-style: italic;\"> 15</span></div><div><br/></div><div><br/></div><div>$ make</div><div>gcc -c main.c</div><div>gcc -c myadd.c</div><div>gcc myadd.o main.o -o main</div><div><span style=\"background-color: rgb(255, 250, 165);-evernote-highlight:true;\">echo &quot;All Done” </span> &lt;—————— printing commands</div><div>All Done</div><div><br/></div><div><br/></div><div><br/></div><div><span style=\"font-style: italic;\"> 14</span></div><div><span style=\"font-style: italic;\"> 15 clean:</span></div><div><span style=\"font-style: italic;\"> 16     rm -f *.o main</span></div><div><span style=\"font-style: italic;\"> 17</span></div><div><span style=\"font-style: italic;\">~</span></div><div><br/></div><div>cleans the directory of .o files</div><div><br/></div><div><br/></div><div><br/></div><div><span style=\"font-style: italic;\"> 18</span></div><div><span style=\"font-style: italic;\"> 19 all: clean main</span></div><div><span style=\"font-style: italic;\">~</span></div><div><ul><li>first clean</li><li>Then make main</li><li>Nothing to do to create all.</li></ul><div><br/></div></div><div><br/></div><div><br/></div><div><span style=\"font-style: italic;\">  1 #target: prereqs</span></div><div><span style=\"font-style: italic;\">  2 #    command</span></div><div><span style=\"font-style: italic;\">  3 #    command</span></div><div><span style=\"font-style: italic;\">  4 CC = clang</span></div><div><span style=\"font-style: italic;\">  5 CFLAGS= -Wall -g</span></div><div><span style=\"font-style: italic;\">  6 LFLAGS= -g</span></div><div><span style=\"font-style: italic; background-color: rgb(255, 250, 165);-evernote-highlight:true;\">  7 LDLIBS = -lm     &lt;—————— link math library. Tells the linker to include the math library. May be used for HW1</span></div><div><span style=\"font-style: italic;\">  8</span></div><div><span style=\"font-style: italic;\">  9</span></div><div><span style=\"font-style: italic;\"> 10 main: main.o myadd.o</span></div><div><span style=\"font-style: italic;\"> 11     #$(CC) $(LFLAGS) myadd.o main.o -o main</span></div><div><span style=\"font-style: italic;\"> 12     #echo &quot;All Done&quot;</span></div><div><span style=\"font-style: italic;\"> 13</span></div><div><span style=\"font-style: italic;\"> 14 main.o: main.c myadd.h</span></div><div><span style=\"font-style: italic;\"> 15     #$(CC) $(CFLAGS) -c main.c</span></div><div><span style=\"font-style: italic;\"> 16</span></div><div><span style=\"font-style: italic;\"> 17 myadd.o: myadd.c myadd.h</span></div><div><span style=\"font-style: italic;\"> 18     #$(CC) $(CFLAGS) -c myadd.c</span></div><div><span style=\"font-style: italic;\"> 19</span></div><div><span style=\"font-style: italic;\"> 20</span></div><div><span style=\"font-style: italic;\"> 21 clean:</span></div><div><span style=\"font-style: italic;\"> 22     rm -f *.o main</span></div><div><span style=\"font-style: italic;\"> 23</span></div><div><span style=\"font-style: italic;\"> 24</span></div><div><span style=\"font-style: italic;\"> 25 all: clean main</span></div><div><br/></div><div><br/></div><div><input type=\"checkbox\" checked=\"false\"/>Preparing for lab 1</div><div><input type=\"checkbox\" checked=\"false\"/>Git tutorial</div><div><br/></div><div><hr/><b>From Jae’s code: <a style=\"font-weight: bold;\" href=\"https://github.com/cs3157/recitations/blob/master/B-Makefiles/sample-Makefile\">https://github.com/cs3157/recitations/blob/master/B-Makefiles/sample-Makefile</a></b></div><div><br/></div><div>- The makefile can use implicit rules to link things</div><div><br/></div><div><br/></div><div>_________________________________</div><div><br/></div><div><span style=\"font-size: 36px; font-weight: bold;\">C language</span></div><div><br/></div><div><input type=\"checkbox\" checked=\"false\"/>Read the textbook for the syntax</div><div><br/></div><div>Types in C:</div><div><ul><li>Char (1-byte) - can represent -128 ~ 127  (-2^7 )</li><li>short (2-byte) - can represent -32768 ~ 32767</li><li>int (4 byte) - can represent  -2G ~ 2G</li><li>long (4 or 8 byte)</li><li>long long (8 bytes)</li></ul><div><br/></div></div><div>2^8 = 256 </div><div>2^10 = 1024 ~ 1k</div><div>2^20 = 1k &amp; 1k = 1M</div><div>2^30 = 1M * 1K = 1G</div><div>2^32 = 1</div><div><br/></div><div><br/></div><div><br/></div><div>int16_t = 4-bit integer</div><div>unsigned int = 0 to  2^32 - 1 (sacrificing the negative side to expand range in the positive direction)</div><div><br/></div><div><br/></div><div><br/></div><div>Hex maps bindary from 0-9-A-F</div><div>take MSB (most significant bit) and give it a negative weight</div><div><br/></div><div>1101</div><div>would be</div><div>1*-8 + 1*4 + 1*1 = <span style=\"font-weight: bold;\">-3</span></div><div><br/></div><div>If you have 1 infront, that’s a negative number for sure.</div><div>1111 = -1 </div><div>1 at the top corresponds to negative weight, other 1’s are positive weights.</div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div></div>"
    }
  ]
}