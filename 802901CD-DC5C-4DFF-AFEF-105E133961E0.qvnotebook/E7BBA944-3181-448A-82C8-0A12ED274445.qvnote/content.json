{
  "title": "Mar 1",
  "cells": [
    {
      "type": "text",
      "data": "<div style=\"word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; white-space: normal;\"><div>FILE * keeps track of a structure containing the file</div><div><br/></div><div>Stdout is line-buffered </div><div><ul><li>it will collect what you send to the screen until the new line character</li></ul><div>Stderror is not line-buffered</div></div><div><ul><li>this is better when you’re debugging, becuase it will show up regardless of whether \\n is at the end of the string</li></ul><div>Block-buffered:</div></div><div><ul><li>Used when writing to files. This is done with fixed-sized buffers. The buffers get filled before it’s written into a file</li></ul><div><br/></div></div><div><br/></div><div>text file is just a string of ascii characters</div><div><br/></div><div><br/></div><div><b>For binary files</b></div><div>Add b to the mode parameter in fopen()</div><div>FILE *fp = fopen(filename, “rb”)</div><div><ul><li>IN UNIX, ther eis no distinction between text and binary files, so ‘b’ doesn’t make a difference</li><li>In windows: Windows has a twobyte sequence for a new line sequence. C is a generic language, and can only understand \\n.</li><ul><li>when reading, turn “\\r\\n” into \\n </li><li>whne writing, turn \\n into \\r\\n - so that it ends up in the right format for windows</li></ul></ul></div><div><br/></div><div>Use b when opening binary files, don’t use b when opening txt files</div><div><br/></div><div><br/></div><div>\\r is carriage return (moving to the beginning of a line, like a typewriter)</div><div><br/></div><div><br/></div><div><br/></div><div>size_t fread:</div><div><ul><li>reads n objects, each size bytes long, from files into the memory pointed to by p</li><li>returns number of objects successfully read</li></ul><div>size_t fwrite()</div></div><div><ul><li>writes n objects, each size bytes long, from memory to location pointed to by p</li><li>returns the number of objects successfully written</li></ul><div><br/></div><div><br/></div><div><br/></div><div>fseek(FILE *file, long offset, int whence)</div></div><div><ul><li>changes the position for file position for next read or write</li><li>You can rewind it to the beginning of the file, and the next read or write will start from there.</li><li>if whence is</li><ul><li>SEEK_SET = FROM THE BEGINNING OF THE FILE</li><li>SEEK_CUR = FROM CURRENT POSITION </li><li>SEEK_END = FROM END OF THE FILE</li></ul><li>return 0 on success, or something else for error</li></ul><div><br/></div></div><div>fseek not used in lab 4, fwrite not used in lab4</div><div><br/></div><div><br/></div><div><br/></div><div>Control-D </div><div><ul><li>Simulate end of file for keyboard input</li></ul><div><br/></div></div><div><br/></div><div><br/></div><div>open database file for reading</div><div>read 40 bytes at a time</div><div><ul><li>declare a structure</li><li>fread pointing to structure to fill in the structure</li></ul><div>put it in linkedlist in memory</div></div><div><br/></div><div>Lookup - get fgets to read user prompt</div><div><br/></div><div><br/></div><div><br/></div><div><hr/></div><div><b><font style=\"font-size: 48px;\">UNIX</font></b></div><div><br/></div><div>Permissions:</div><div><ul><li>-rw-r--r--   1 ian.huang  staff   515B Jan 18 23:21 TEST</li><li>“1” is the number of links to that file</li><li>You can have many links to the same file</li></ul><div><br/></div><div><br/></div><div><br/></div></div><div><br/></div><div><ul><li>ian.huang belongs to the “staff” group </li><li>time that the file was modified</li></ul><div><br/></div></div><div><ul><li>1 - &quot;- means file, d means directory&quot;</li><li>2-4 - owner permission</li><li>5-7 - permisions for everyone in the group</li><li>8-10 - permissions for everyone else</li></ul></div><div><br/></div><div>vim adopts the permission access of the user</div><div><br/></div><div><br/></div><div>-rwsr-xr-x (permission structure of mdb-add-cs3157)</div><div><ul><li>s stands for set user id</li><li>when somebody else runs this program, this program will run AS IF the owner  ran it.</li></ul><div><br/></div></div><div>you can represent permissions as an OCTAL NUMBER. 777 would be all permissions</div><div><br/></div><div>chmod 700 homedirectory - this makes it so that no body else can read and write into home directory</div><div><br/></div><div>‘x’ for directories: </div><div><ul><li>you can go past this directory to go into subdirectories</li></ul><div><br/></div></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div></div>"
    }
  ]
}