{
  "title": "Recitation # 3",
  "cells": [
    {
      "type": "text",
      "data": "<div style=\"word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; white-space: normal;\"><div>8 bits in 1 byte</div><div><br/></div><div>First part is talking about bits and bytes and blahblahblah………..</div><div><br/></div><div><br/></div><div>adding two binary digits:</div><div>   101</div><div>+ 100</div><div>_______</div><div>  1001 </div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div>masks check whether an input has 1 or 0 at places indicated by 1 in the mask</div><div><br/></div><div>   101</div><div>&amp; 011</div><div>______</div><div>   001</div><div><br/></div><div><br/></div><div><br/></div><div>if working with signed integers, a right shift will leave a trail of 1’s at the very beginning.</div><div><br/></div><div>100101 &gt;&gt; 3 = 111100</div><div><br/></div><div><br/></div><div><hr/></div><div><br/></div><div>C variables not preset like Java</div><div>‘\\</div><div>long double l = 4.0<span style=\"font-weight: bold; text-decoration: underline;\">L;</span></div><div>unsigned double m = 4.0<span style=\"font-weight: bold; text-decoration: underline;\">U</span>;</div><div>char c = ‘a’; &lt;- single quotes for chars.</div><div><br/></div><div><br/></div><div><span style=\"font-size: 16px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-variant-caps: normal; font-variant-ligatures: normal;\"> All expressions can be statements, but not all statements can be expressions.</span></div><div><br/></div><div><br/></div><div>suppose x starts off as 0. x++ has value 0, but from this line onwards, x = 1</div><div>++x would have value 2, and form this line onwards, x=2</div><div><br/></div><div>int a = &lt;condition&gt; ? val1 val2;</div><div>val1 is assigned if condition is 1</div><div><br/></div><div><br/></div><div>foo() &amp;&amp; bar();</div><div>doesn’t run bar() if foo() returns 0;</div><div><br/></div><div><div><br/></div><table style=\"border-collapse: collapse; min-width: 100%;\"><colgroup><col style=\"width: 130px;\"/><col style=\"width: 130px;\"/></colgroup><tbody><tr><td style=\"border: 1px solid rgb(219, 219, 219); width: 130px; padding: 8px;\"><div>Global</div></td><td style=\"border: 1px solid rgb(219, 219, 219); width: 130px; padding: 8px;\"><div>Stack</div></td></tr><tr><td style=\"border: 1px solid rgb(219, 219, 219); width: 130px; padding: 8px;\"><div>Not local</div></td><td style=\"border: 1px solid rgb(219, 219, 219); width: 130px; padding: 8px;\"><div>local</div><div>transient</div><div>auto</div></td></tr></tbody></table><div><br/></div><div>int x = 5; //global variable</div><div>int foo(){</div></div><div>    int x =5; //stack variable</div><div>}</div><div><span style=\"font-weight: bold;\">but this leads to an error. You can however change int x = 6 within foo().</span></div><div><br/></div><div><br/></div><div>int extern x; // accesses global variable from another file</div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div>*p is an…</div><div>L value — exists temporarily. </div><div><br/></div><div>NULL != 0.</div><div><ul><li>char *p = 0x0</li><ul><li>that is a null pointer. </li></ul><li>char c = ‘0’; char *p = &amp;c</li><ul><li>this is NOT a null pointer.</li></ul></ul></div><div><br/></div><div><br/></div><div><br/></div></div>"
    }
  ]
}