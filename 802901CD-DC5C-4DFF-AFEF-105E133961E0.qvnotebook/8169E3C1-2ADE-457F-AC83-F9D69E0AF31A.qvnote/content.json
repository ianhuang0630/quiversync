{
  "title": "Feb 15",
  "cells": [
    {
      "type": "text",
      "data": "<div style=\"word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; white-space: normal;\"><div>Struct</div><div>LinkedList<br/></div><div><br/></div><div><br/></div><div><b>Announcements</b></div><div><b><br/></b></div><div><u>Midterm</u></div><div>up to lecture 07 (including this lecture)</div><div>up to lab 2</div><div><br/></div><div>textbook, lab instructions </div><div><ul><li>READING ASSIGNMENTS ARE LISTED AT THE BEGINNING OF LECTURE NOTES. (up to chapter 6)</li></ul></div><div><br/></div><div>Thursday class canceled </div><div><br/></div><div><br/></div><div><hr/></div><div><br/></div><div>struct Pt{</div><div><span>    double x;</span><br/></div><div><span>    double y;</span><br/></div><div>};</div><div><ul><li>just like a class in java</li><li>in c, you can’t put functions inside classes</li><li>needs to be a semicolon at the end</li><li>Struct Pt {…} is a type.</li><li>you can write</li><ul><li>struct Pt{…} p;<br/></li></ul></ul><div><br/></div></div><div>struct Pt p;</div><div><br/></div><div><br/></div><div>foo(){</div><div><span>    struct pt p1;</span><br/></div><div><span><span>    struct pt p2 = {1.0, 2.0};</span><br/></span></div><div><ul><li>both are declared on the stack<br/></li><li>each struct pt is 16 bytes (2 floats) </li><ul><li>Exception: with intel cpu’s, sometime there are gaps between placement of variables, so the size of the struct might be bigger than the sum of the parts.</li></ul></ul><div><span>    double z = p2.x;</span><br/></div></div><div><ul><li>accessing “x” inside p2, just liek java</li></ul><div><span>    struct Pt *q2 = &amp;p2;</span><br/></div></div><div><ul><li>q2 has address of p2</li><li>q2 points to beginning address of p2 — the address of the x</li></ul><div><span>    int *r2  = &amp;p2.x;</span></div></div><div><ul><li>r2 and q2 are pointing to the same address, but if you increment q2, it’s no longer inside the struct</li></ul><div><span><span>    </span>(*q2).x *= 10;</span></div></div><div><ul/></div><div><ul><li>. binds more tightly than *, so you need the brackets.</li></ul><div><span>    q2 -&gt; x *= 10;</span><br/></div></div><div><ul><li>is equivalent to (*q2).x</li></ul></div><div>}</div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div>void transpose(struct Pt p)</div><div>{</div><div><span>    double t = p.x;</span><br/></div><div><span>    p.x = p.y;</span><br/></div><div><span>    p.y = t;</span></div><div>}</div><div><br/></div><div>main(){</div><div><span>    struct Pt p = {1.0, 2.0};</span><br/></div><div><span><span>    transpose℗; </span></span></div><div><ul><li>this p gets copied into transpose</li></ul></div><div><span>    printf(“(%d, %d)”, p.x, p.y);</span><br/></div><div><ul><li>this does not print 2,1. It prints 1,2</li></ul></div><div>}<span><span><br/></span></span></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div>void transpose(struct Pt *p){</div><div><span>    double t = p -&gt; x;</span></div><div><span><span>    p-&gt;x = p-&gt;y;</span><br/></span></div><div><span><span><span>    p-&gt;y = t;</span><br/></span></span></div><div><span><span><span>}</span></span></span></div><div><ul/></div><div><br/></div><div>main(){</div><div>    struct Pt p = {1.0, 2.0};</div><div>    transpose(&amp;p); </div><div><div><ul><li>this is not passing by reference</li><ul><li>when you pass a variable, the function changes the variable in the stack above (think mutable arrays in python)</li></ul><li>THere is no passing by reference in c. always passing by value in c.</li><li>C simulates passing by reference by using pointers.</li></ul></div><ul/></div><ul/><div>    printf(“(%d, %d)”, p.x, p.y);</div><ul/><div>}</div><div><br/></div><div><br/></div><div><br/></div><div><b>{</b></div><div><b><span>    </span>struct pt a[1];</b></div><div><div><div><b><span>    struct Pt p;</span><br/></b></div><div><span><span><b>    a-&gt;x = 5;</b></span></span></div><ul/></div><ul/></div><div><b>}</b></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div>struct Node{</div><div><span>    int data;</span><br/></div><div><span><span>    struct Node *next;</span><br/></span></div><div><ul><li>it’s important it’s struct Node * — otherwise if it’s struct Node it wouldn’t work</li></ul></div><div>};</div><div><ul><li>“self referential structure”</li></ul><div><br/></div></div><div><br/></div><div>struct Node *head = NULL;</div><div><ul><li>this is a global variable</li></ul></div><div>int main(){</div><div><span>    head = addFront(head, 100); </span><br/></div><div><span><span>    head = addFront(head, 200);</span><br/></span></div><div><span><span><br/></span></span></div><div>}<br/></div><div><br/></div><div>struct Node * addFront(struct Node * head, int x){</div><div><div><ul><li>if we create the next node on the stack, it will be wiped when it goes up a stack<br/></li><li>so we use malloc to allocate it space on the heap<br/></li></ul><div><span>    struct Node *node = malloc(sizeof(struct Node))<input type=\"checkbox\" checked=\"false\"/></span></div></div></div><div><span><span>    node -&gt; head = head;</span><br/></span></div><div><span><span><span>    node -&gt; data = x;</span><br/></span></span></div><div><span><span><span><span>    </span><br/></span></span></span></div><div><span><span><span><span><span>    return node;</span><br/></span></span></span></span></div><div><span>}</span></div><div><br/></div><div><br/></div><div><br/></div><div><b>Lab 3:</b></div><div><b><br/></b></div><div><b>struct List{</b></div><div><b><span>    struct Node *head; </span><br/></b></div><div><b><span><br/></span></b></div><div><b>};</b></div><div><ul><li>useful because List can contain more information than a pointer to the head node<br/></li></ul><div><b>struct Node {</b></div></div><div><b><span>    void *data;</span><br/></b></div><div><b><span><span>    struct Node * next;</span><br/></span></b></div><div><b>};</b></div><div><ul/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div></div>"
    }
  ]
}