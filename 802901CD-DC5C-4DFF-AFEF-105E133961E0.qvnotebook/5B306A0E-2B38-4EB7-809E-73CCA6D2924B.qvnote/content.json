{
  "title": "Feb 13",
  "cells": [
    {
      "type": "text",
      "data": "<div style=\"word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; white-space: normal;\"><div>Lecture 07</div><div><ul><li>Function pointers</li><li>struct</li></ul><div><br/></div></div><div><br/></div><div>void strcpy(char *t, const char *s)</div><div><ul><li>“const”</li></ul><div>{</div><div><span>    while (*t++ == *s++);</span><br/></div><div>}</div></div><div><br/></div><div><br/></div><div>foo(){</div><div><span>    char x;</span><br/></div><div>    <b>const</b> char *p = &amp;x;</div><div><ul><li>you cannot modify what p is pointing to<br/></li></ul></div><div><div><ul/></div><ul/></div><div>}</div><div><br/></div><div>char * const q = &amp;x;</div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div>void strcat(char *t, const char *s){</div><div><span>    while(*t)</span></div><div><span><span>    <span>    t++;</span></span><br/></span></div><div><span><span><span><span>    strcopy(t, s);</span><br/></span></span></span></div><div>}</div><div>foo(){</div><div><span>    char a[10];</span><br/></div><div><span>    strcpy(a, “abc”);</span><br/></div><div><ul><li>more memory allocated than used</li></ul><div><span>    strcat(a, “xyz”);</span></div></div><div><ul><li>concatenate xyz at the end of string pointed by a</li></ul><div><span>    </span><br/></div></div><div>}</div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div>char t[] is equivalent to char *t;</div><div><br/></div><div><br/></div><div>void qsort(void *a, size_t n, size_t sz, int(*comp Fn)(const void *, const void *)){</div><div><ul><li>int(*comp Fn)(const void *, const void *)</li><ul><li>type: int(*)(const void *, const void *)</li><li>Name: compfn</li></ul></ul><div><br/></div></div><div><br/></div><div><span>    … code …</span></div><div><span>    int res = (*compfn)(a, b);</span></div><div><ul><li>you can also just call compfn instead of (*compfn)</li></ul><div>    <br/></div></div><div>}</div><div><br/></div><div>typedef MyInt int;</div><div><ul><li>you can define your own type, but they’re synonyms</li></ul><div><br/></div></div><div><br/></div><div>int f (const void *a, const void *b){</div><div><span>    // comparing data items pointed to by a and b</span><br/></div><div><span><span><span>    </span></span></span></div><div><span><span><span><span>    </span>// retrieving the integers </span><br/></span></span></div><div><span><span>    int x = *(int *) a;</span><br/></span></div><div><ul><li>you cast it to int * because you know it’s sorting an integer array</li></ul><div><span>    int y = *(int *) b;</span><br/></div></div><div><span><span>    </span><br/></span></div><div><span><span><span>    if (x&lt;y)</span><br/></span></span></div><div><span><span><span><span>    <span>    return -1;</span></span><br/></span></span></span></div><div><span><span><span>    else if (y &gt; x)</span><br/></span></span></div><div><span><span><span><span>    <span>    return 1;</span></span><br/></span></span></span></div><div><span><span><span><span><span><span>    return 0;</span></span></span></span></span></span></div><div><ul><li>must return NEGATIVE NUMBER IF *a&lt;*b<br/></li><li>return positive number if *b &gt; *a</li><li>return 0 if they’re the same</li></ul></div><div>}</div><div><br/></div><div><br/></div><div><br/></div><div>{</div><div><span>    int a[10] = {108, ….}; </span></div><div><span><span>    </span><br/></span></div><div><span>    qsort(a, 10, sizeof(int), &amp;f)</span><br/></div><div><ul><li>int * can be assigned to void *</li><li>instead of &amp;f, you can just put “f”</li></ul></div><div><ul/></div><div>}</div><div><br/></div><div><hr/></div><div><br/></div><div>{</div><div>int x;</div><div>int (*f1) (void *);</div><div><ul><li>*something - something must be pointer</li><li>takes void *</li><li>returns int</li></ul></div><div>int *f2(void *);</div><div><ul><li>this looks like a function declaration. this is not interpreted as a declaration of a variable</li></ul></div><div><br/></div><div>int (*f3[3])(void *);</div><div><ul><li>an array of three things where each element is a pointer to a function</li><li>f3[3] : f3 is an array of 3 elements</li><li>* something : the elements are pointers.</li><li>* something (void *): the function takes void *</li><li>returns int</li></ul><div><br/></div></div><div>f1 = &amp;foo;</div><div>f3[1] = &amp;foo;</div><div>}</div><div><br/></div><div><br/></div><div><hr/>char *a[3] = {“abc”, “def”, “xyz”};</div><div><ul><li>a is an array of 3 pointers to char</li></ul><div><br/></div></div><div><div>*(*a + 3)</div><div><div><ul><li>points to 0 in “abc”</li><li>* binds more tightly than +</li></ul><div><br/></div></div></div></div><div><br/></div></div>"
    }
  ]
}