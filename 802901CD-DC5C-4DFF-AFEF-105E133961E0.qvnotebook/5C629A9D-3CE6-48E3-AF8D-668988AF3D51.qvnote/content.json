{
  "title": "Apr 3",
  "cells": [
    {
      "type": "text",
      "data": "<div style=\"word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; white-space: normal;\"><div>./mdb-lookup-server</div><div><ul><li>you have the tcp sample code. </li><li>you have the mdb lookup code — the solution code</li><li>combine these for part1. If you understand everything, there is very little code to write.</li></ul><div><br/></div></div><div><br/></div><div>lab 6 part 1 is recreating  lab 5 part 1, but with socket api</div><div>but it doesn’t give you the lookup prompt</div><div><br/></div><div>cleint starts by sending a word</div><div>server responds by search result + blank line</div><div><br/></div><div>in http, blank line means \\r\\n — the windows version of the blankline<br/><br/></div><div>link from class lecture notes describes http protocol</div><div><br/></div><div>your code for lab 6+7 http should tolerate \\n vs. \\r\\n</div><div><br/></div><div>part2</div><div><ul><li>copy tcp-sender code</li><li>send request</li><li>stream information, but only start recording after you see a blank line character</li></ul><div><br/></div></div><div>will skip over the remaining part of the HTTP protocol next week</div><div><br/></div><div><b><font style=\"font-size: 48px;\">C++</font></b></div><div><hr/><br/></div><div>Approach C++ as an extension of C</div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div>#include &lt;stdio.h&gt;</div><div><br/></div><div>int main() {</div><div><span>    printf(“helloworld\\n”);</span><br/></div><div>}</div><div><ul><li>this is a c program too - you can compile it for gcc</li><li>g++ is the cpp compiler. </li><ul><li>g++ a.cpp</li></ul><li>There are some things that is available for c but not available c++, but generally c++ is a superset of c</li><ul><li>in c++ you have to cast when you go from void * to some other type pointer</li><li>You don’t need to cast when you go from type pointer —&gt; void *</li></ul><li>has a boolean type <i>bool</i>.</li><ul><li><br/></li><ul/></ul></ul></div><div><br/></div><div>#include &lt;stdio.h&gt;</div><div><ul><li>they recommend that you use “cstdio” instead. no .h extension.</li></ul></div><div>#include &lt;iostream&gt;</div><div><ul><li>in Cpp, they don’t have .h anymore</li><li>cout is inside here.</li></ul><div><br/></div></div><div>int main() {</div><div>    std::cout &lt;&lt; “hello” &lt;&lt; endl;</div><div><ul><li>cout is global object representing stdout</li><li>&quot;&lt;&lt;“ is still a left bitshift, but here, it takes a different meaning. With io objects, this is “to” operator. </li><li>endl is the new line character and flushes the buffer. </li></ul><div><br/></div><div><span>    std::cout &lt;&lt;“hello” &lt;&lt; 3157 &lt;&lt; endl;</span></div></div><div><ul><li>equivalent to </li></ul></div><div>}</div><div><br/></div><div><br/></div><div><b>clang++</b></div><div><ul><li>in mac, g++ is clang++. no g++ is installed.</li><li>clang++ has helpful error messages. </li><li>In linux (clac), use clang++. It has better error messages.</li></ul><div><br/></div></div><div>namespace - this tells you what functions are inside a library. cout is enclosed in the std namespace. that’s why you write std::cout<br/><br/></div><div>YOU could also write “using namespace std;” at the top of the file, and this pollutes the global namespace with std namespace, but you would’t have to write std::cout (cout is sufficient.)</div><div><br/></div><div><br/></div><div><br/></div><div>#include &lt;stdio.h&gt;</div><div>#include &lt;iostream&gt;<br/></div><ul/><div>using namespace std;</div><div><br/></div><div>struct Pt{</div><div><span>    double x;</span><br/></div><div><span><span>    double y;</span></span></div><div>}</div><div>void print(pt p){</div><div><span>    cout &lt;&lt; “(” &lt;&lt; p.x &lt;&lt; “,” &lt;&lt; p.y &lt;&lt; “)”&lt;&lt; endl;</span><br/></div><div>}</div><div>int main(){</div><div><br/></div><ul/><div>    cout &lt;&lt;“hello” &lt;&lt; 3157 &lt;&lt; endl;</div><div><span>    Pt p1;</span></div><div><ul><li>you don’t have to write struct anymore.</li></ul></div><div><span><span>    p1.x = p1.y = 10;</span><br/></span></div><div><span><span><br/></span></span></div><div><span><span><span>    print (p1);</span></span></span></div><ul/><div>}</div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div>#include &lt;stdio.h&gt;</div><div>#include &lt;iostream&gt;</div><div>using namespace std;</div><div><br/></div><div>class Pt{</div><div><ul><li>class = struct, with one caviat. The fields are private by default. You wouldn’t be able to access it from the outside. </li><li>in struct, everything is public.</li></ul><div>public:</div></div><div><ul><li>you denote sections like this. x and y are now public variables</li></ul></div><div><span>    </span>double x;</div><div>    double y;</div><div><br/></div><div><span>    void print(){</span></div><div><ul><li>no arguments</li><li>having a method doesn’t change the size of the structure — where is it stored?</li><li>this called a “member function” in cpp</li></ul></div><div>    <span>    </span>cout &lt;&lt; “(” &lt;&lt; x &lt;&lt; “,” &lt;&lt; y &lt;&lt; “)”&lt;&lt; endl;</div><div><span>    <span>    </span></span><br/></div><div><span><span><span>    <span>    cout &lt;&lt; “(” &lt;&lt; this -&gt; x  &lt;&lt; “,” &lt;&lt; this -&gt; y &lt;&lt; “)” &lt;&lt; endl ;</span></span><br/></span></span></div><div><span>    </span>}</div><div><ul/></div><div>}</div><div>int main(){<br/></div><div><br/></div><div>    cout &lt;&lt;“hello” &lt;&lt; 3157 &lt;&lt; endl;</div><div>    Pt p1;</div><ul><li>you don’t have to write struct anymore.</li></ul><div>    p1.x = p1.y = 10;</div><div><br/></div><div>    p1.print();</div><div><ul><li>this is how you invoke a method </li></ul></div><div>}</div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div>the initial c++ compiler translates c++ to c</div><div><ul><li>takes out member functions, and then passed a struct * argument into it (struct *this)</li><li>replaced all fields with this -&gt; x …etc</li><li>when the file calls the function, pass the struct pointer into the argument</li><li>lab3 was this. lab3 was object oriented programming</li></ul><div><br/></div></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div>virtual void print()</div><div><ul><li>if you put this in the class,then it will create an array of function pointers in the class,</li><li>and it would point to the correct function</li><li>and this would allow inheritance and polymorphism </li></ul><div><br/></div></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div>class Pt{</div><ul/><div>public:</div><div>    double x;<br/></div><ul/><div>    double y;</div><div><span>    Pt (double _x, double _y) {</span><br/></div><div><ul><li>this is a constructor. you can initialize your object with fields.</li><ul/></ul></div><div><span><span>    <span>    x = _x; y = _y;</span></span></span></div><div><span><span>    </span>}</span></div><div><span><span>    </span><br/></span></div><div><span><span><span>    Pt (double _x = 10, double _y = 10){</span></span></span></div><div><div><ul><li>this gives default values if any of them are not given.</li><li>you can initialize this </li><li>but you can’t use the default value for x but then specify soemthing for y….</li></ul></div><ul/></div><div><span><span><span><span><span>    <span>    x = _x;</span></span></span></span></span></span></div><div><span><span><span><span><span>    <span>    y= _y;</span></span>    </span></span></span></span></div><div><span><span><span><span>    </span>} </span><br/></span></span></div><div><span><br/></span></div><div>    void print(){</div><ul/><div>        cout &lt;&lt; “(” &lt;&lt; x &lt;&lt; “,” &lt;&lt; y &lt;&lt; “)”&lt;&lt; endl;</div><div>        </div><div>        cout &lt;&lt; “(” &lt;&lt; this -&gt; x  &lt;&lt; “,” &lt;&lt; this -&gt; y &lt;&lt; “)” &lt;&lt; endl ;</div><div>    }</div><div>}</div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div></div>"
    }
  ]
}