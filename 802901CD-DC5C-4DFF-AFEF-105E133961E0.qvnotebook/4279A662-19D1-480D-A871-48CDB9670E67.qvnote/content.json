{
  "title": "Midterm 2 review session",
  "cells": [
    {
      "type": "text",
      "data": "<div style=\"word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; white-space: normal;\"><div>cat mypipe | nc -l 50000 | cat - &gt; mypipe</div><div><ul><li>what’s the dash? It reads from stdin and redirects it to mypipe.</li><li>On the client side, this reprints everything that they type into the pipe</li></ul><div><br/></div></div><div>nc -l 50000 &lt; mypipe | mypipe</div><div><ul><li>this is invalid because mypipe is not a process</li></ul><div><br/></div></div><div>nc -l 50000 &lt; mypipe | sed s/SU/RO/ &gt; mypipe</div><div><ul><li>this is valid, every thing are processes</li></ul><div><br/></div></div><div><br/></div><div>echo doesn’tread anything from stdin.</div><div><br/></div><div><br/></div><div>Understand the modalities for fopen(r, w, a, r+…)</div><div><br/></div><div>important IO functions</div><div><ul><li>fopen</li><li>fclose</li><li>fgets</li><li>fread</li><li>fwrite</li><li>fseek</li></ul></div><div><br/></div><div>make sure to understand fseek </div><div><br/></div><div><br/></div><div>When forking, this clones all of the memory (heap included) but the memory addresses for every variable within the parent and the clone remains unchanged — the computer <span style=\"font-weight: bold;\">thinks that they have the same memory address, although they’re in a different block of </span><span style=\"text-decoration: underline; font-weight: bold;\">physical</span><span style=\"text-decoration: underline;\"> </span><span style=\"font-weight: bold;\">memory</span>.</div><div><br/></div><div><br/></div><div>opening a file allocates memory — you need to “fclose(FILE)” to free the heap memory allocated to the file</div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div>waitpid</div><div><ul><li>The second argument is the argv[0], so you end up writing the first argument twice</li><li>read the manpage</li></ul></div><div>Endianness </div><div><ul><li>big endian</li><ul><li>the most significant digit of a number is stored in the first position in the file</li></ul><li>Little endian</li><ul><li>the least significant digit of a number</li></ul><li>The standardized form is big endian</li></ul></div><div><br/></div><div>htonl: changes little endian to standardized form</div><div>ntohl: changes standardized form to little endian</div><div><br/></div><div>Remember that only the individual byte sequences are flipped, not the order of the objects stored.</div></div>"
    }
  ]
}